<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.2 (doctrine2-annotation) on 2016-05-02 04:02:02.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace NoInc\SimpleStorefrontBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * NoInc\SimpleStorefrontBundle\Entity\Cart
 *
 * @ORM\Entity(repositoryClass="NoInc\SimpleStorefrontBundle\Repository\CartRepository")
 * @ORM\Table(name="cart")
 */
class Cart
{
    /**
     * ID of the Ingredient
     *
     * @ORM\Id
     * @ORM\Column(type="integer", nullable=false)
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * Total price of the cart
     *
     * @ORM\Column(type="float", nullable=false)
     */
    protected $total;

    /**
     * Unique token of the cart
     *
     * @ORM\Column(type="string", length=256, nullable=false)
     */
    protected $token;

    /**
     * Unique token of the cart's customer
     *
     * @ORM\Column(type="string", length=256, nullable=true)
     */
    protected $customer_token;

    /**
     * Unique token of the cart's charge
     *
     * @ORM\Column(type="string", length=256, nullable=true)
     */
    protected $charge_token;

    /**
     * @ORM\OneToMany(targetEntity="CartItem", mappedBy="cart")
     * @ORM\JoinColumn(name="id", referencedColumnName="cart_id", nullable=false)
     */
    protected $cartItems;

    public function __construct()
    {
        $this->cartItems = new ArrayCollection();
        $this->token = md5(uniqid());
        $this->total = 0;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of total.
     *
     * @return float
     */
    public function getTotal()
    {
        return $this->total;
    }

    /**
     * Set the value of total.
     *
     * @param float $total
     * @return \NoInc\SimpleStorefrontBundle\Entity\Cart
     */
    public function setTotal($total)
    {
        $this->total = $total;
        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return string
     */
    public function getToken()
    {
        return $this->token;
    }

    /**
     * Get the value of customer_token.
     *
     * @return string
     */
    public function getCustomerToken()
    {
        return $this->customer_token;
    }

    /**
     * Set the value of customer_token.
     *
     * @param string $customer_token
     * @return \NoInc\SimpleStorefrontBundle\Entity\Cart
     */
    public function setCustomerToken($customer_token)
    {
        $this->customer_token = $customer_token;
        return $this;
    }

    /**
     * Get the value of charge_token.
     *
     * @return string
     */
    public function getChargeToken()
    {
        return $this->charge_token;
    }

    /**
     * Get the value of id.
     *
     * @param string $charge_token
     * @return \NoInc\SimpleStorefrontBundle\Entity\Cart
     */
    public function setChargeToken($charge_token)
    {
        $this->charge_token = $charge_token;
        return $this;
    }

    /**
     * Add CartItem entity to collection (one to many).
     *
     * @param \NoInc\SimpleStorefrontBundle\Entity\CartItem $cartItem
     * @return \NoInc\SimpleStorefrontBundle\Entity\Cart
     */
    public function addCartItem(CartItem $cartItem)
    {
        $this->cartItems[] = $cartItem;

        return $this;
    }

    /**
     * Remove CartItem entity from collection (one to many).
     *
     * @param \NoInc\SimpleStorefrontBundle\Entity\CartItem $cartItem
     * @return \NoInc\SimpleStorefrontBundle\Entity\Cart
     */
    public function removeCartItem(CartItem $cartItem)
    {
        $this->cartItems->removeElement($cartItem);

        return $this;
    }

    /**
     * Get the total amount of items in the cart.
     *
     * @return integer $count;
     */
    public function getItemCount()
    {
        return count($this->cartItems);
    }

    /**
     * Get CartItem entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCartItems()
    {
        return $this->cartItems;
    }


    public function __sleep()
    {
        return array('id', 'total', 'token', 'customer_token', 'charge_token');
    }
}

